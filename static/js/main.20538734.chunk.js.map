{"version":3,"sources":["gameConstants.js","gameutils.js","components/stepcounter.js","components/cell.js","components/gamefield.js","components/timer.js","components/gamestatusbar.js","components/levelpicker.js","components/game.js","index.js"],"names":["Levels","Easy","name","mines","width","height","Medium","Expert","GameState","getIndexesAround","indexToPos","index","pos","x","y","minY","maxX","maxY","i","j","StepCounter","props","message","maxSteps","counter","type","min","max","value","currentStep","onChange","id","Cell","className","isNumber","Number","isInteger","onClick","onContextMenu","GameField","this","guesses","e","preventDefault","Array","from","keys","map","renderSquare","React","Component","defaultProps","Timer","useState","updateTime","time","setTime","undefined","startTime","isRunning","msElapsed","Date","Math","floor","useEffect","timer","setTimeout","clearTimeout","GameStatusBar","minesLeft","gameReset","emoji","timeRunning","LevelPicker","levels","level","l","onChangeLevel","Game","init","state","makeInitialState","history","numCells","fill","stepNumber","numFlags","gameState","console","log","JSON","stringify","numMines","assert","setState","isFlag","boardDirty","slice","length","startCell","lastCell","random","neighbour","gameutils","revealAt","numMinesToFind","numGuessedMinesAround","numUnguessedAround","onLoss","checkWin","concat","n","current","reset","handleClick","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20538734.chunk.js","sourcesContent":["export const Levels = {\r\n    Easy: {\r\n        name: \"Easy\",\r\n        mines: 10,\r\n        width:9,\r\n        height: 9\r\n    },\r\n    Medium: {\r\n        name: \"Medium\",\r\n        mines: 40,\r\n        width: 16,\r\n        height: 16\r\n    },\r\n    Expert: {\r\n        name: \"Expert\",\r\n        mines: 99,\r\n        width: 30,\r\n        height: 16\r\n    }\r\n};\r\n\r\nexport const GameState = {\r\n    Ongoing: 'ðŸ™‚',\r\n    Loss: 'ðŸ’€',\r\n    Win: 'ðŸ˜Ž'\r\n};\r\n\r\nexport const MaxTime = 999;\r\n","export function indexToPos(index, width) {\r\n    return [index % width, (index / width) >> 0]; // integer division hack\r\n}\r\n\r\n// Enumerate indexes around another index\r\nexport function* getIndexesAround(pos, width, height) {\r\n    const [x,y] = indexToPos(pos, width);\r\n    const minX = x === 0 ? 0 : x - 1;\r\n    const minY = y === 0 ? 0 : y - 1;\r\n    const maxX = x === width - 1 ? x : x + 1;\r\n    const maxY = y === height - 1 ? y : y + 1;\r\n    for (let i = minX; i <= maxX; ++i)\r\n        for (let j = minY; j <= maxY; ++j)\r\n            if (x !== i || y !== j) {\r\n                yield i + j * width;\r\n            }\r\n}\r\n\r\nexport function initMines(numMines, width, height, startCell) {\r\n    const numCells = width * height;\r\n    var mines = Array(numCells).fill(0);\r\n    for (let i = 1; i <= numMines; ++i) {\r\n        let lastCell = numCells - i;\r\n        let j = Math.floor(Math.random() * lastCell);\r\n        while (j === startCell || mines[j] === 9) {\r\n            j = lastCell++;\r\n        }\r\n        console.assert(mines[j] !== 9);\r\n        mines[j] = 9;\r\n        const neighbourIndices = Array.from(getIndexesAround(j, width, height));\r\n        for (const neighbour of neighbourIndices)\r\n            mines[neighbour] = mines[neighbour] === 9 ? 9 : mines[neighbour] + 1;\r\n    }\r\n    return mines;\r\n}\r\n","const StepCounter = (props) => {\r\n    const message = (props.maxSteps === 0) ? \"\" : \"Steps: \";\r\n    const counter = <input type=\"range\" min=\"0\" max={props.maxSteps} value={props.currentStep} onChange={props.onChange} />;\r\n    return (\r\n        <div id=\"stepcounter\">\r\n            {message}\r\n            {(props.maxSteps === 0) ? \"\" : counter}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepCounter;\r\n","const Cell = (props) => {\r\n    let className = \"square\";\r\n    let value = props.value;\r\n    const isNumber = Number.isInteger(value) && value > 0 && value <= 9;\r\n    if (isNumber)\r\n        className += \" square_number_\" + value;\r\n    if (isNumber || value === \"\" || value === 'ðŸ’¥')\r\n        className += \" square_revealed\";\r\n    if (value === \"ðŸš©ðŸ’£\") {\r\n        value = 'ðŸš©';\r\n        className += \" square_bad_flag\";\r\n    }\r\n    return (\r\n        <button className={className} onClick={props.onClick} onContextMenu={props.onContextMenu}>\r\n        {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from './cell';\r\nimport { Levels } from '../gameConstants';\r\n\r\nclass GameField extends React.Component {\r\n    renderSquare(i) {\r\n        return <Cell\r\n            key={i}\r\n            value={this.props.guesses[i]}\r\n            onClick={(e) => { this.props.onClick(i); e.preventDefault(); }}\r\n            onContextMenu={(e) => { this.props.onContextMenu(i); e.preventDefault(); }}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            {Array.from(Array(this.props.height).keys()).map(y => {\r\n                return (\r\n                <div key={y} className=\"board-row\">\r\n                    {Array.from(Array(this.props.width).keys()).map(x => this.renderSquare(x + y * this.props.width) )}\r\n                </div>);\r\n                }\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGameField.defaultProps = {\r\n    height: Levels.Easy.height, width: Levels.Easy.width\r\n}\r\nGameField.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n}\r\n\r\nexport default GameField;\r\n","import propTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MaxTime } from '../gameConstants';\r\n\r\nfunction Timer(props) {\r\n    const [time, setTime] = useState(updateTime());\r\n\r\n    useEffect(() => {\r\n        let timer;\r\n        if (props.isRunning) {\r\n            timer=setTimeout(() => {\r\n            setTime(updateTime());\r\n            }, 1000);\r\n        }\r\n        // Clear timeout if the component is unmounted\r\n        return () => {\r\n            if (timer !== undefined)\r\n                clearTimeout(timer); }\r\n      });\r\n\r\n      function updateTime() {\r\n          if (props.startTime === undefined && !props.isRunning)\r\n            return 0;\r\n          const msElapsed = +new Date() - +props.startTime;\r\n          return Math.min(MaxTime, Math.floor(msElapsed / 1000));\r\n      }\r\n\r\n      return (\r\n      <div className={props.className}>\r\n          {time}\r\n      </div>\r\n      );\r\n}\r\n\r\nTimer.defaultProps = {\r\n    isRunning: false,\r\n    startTime: undefined\r\n}\r\n\r\nTimer.propTypes = {\r\n    isRunning: propTypes.bool,\r\n    startTime: propTypes.instanceOf(Date)\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Timer from './timer';\r\n\r\nconst GameStatusBar = (props) => {\r\n   return (\r\n        <div className=\"game-status\">\r\n            <div className=\"mine-counter status_button\">\r\n                {props.minesLeft}\r\n            </div>\r\n            <div className=\"emoji status_button\" onClick={props.gameReset}>\r\n                {props.emoji}\r\n            </div>\r\n            <Timer className=\"timer status_button\"\r\n                isRunning={props.timeRunning}\r\n                startTime={props.startTime}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nGameStatusBar.defaultProps = {\r\n    minesLeft: 0,\r\n    timeRunning: false,\r\n    startTime: undefined\r\n}\r\n\r\nGameStatusBar.propTypes = {\r\n    minesLeft: PropTypes.number,\r\n    emoji: PropTypes.string,\r\n    timeRunning: PropTypes.bool,\r\n    startTime: PropTypes.instanceOf(Date)\r\n}\r\n\r\n\r\nexport default GameStatusBar;\r\n","import React from 'react';\r\nimport { Levels } from '../gameConstants'\r\n\r\nconst LevelPicker = (props) => {\r\n    const levels = [\r\n        {\r\n            name: 'Easy',\r\n            level: Levels.Easy\r\n        },\r\n        {\r\n            name: 'Medium',\r\n            level: Levels.Medium\r\n        },\r\n        {\r\n            name: 'Expert',\r\n            level: Levels.Expert\r\n        },\r\n    ]\r\n    return (\r\n        <div>\r\n            {levels.map(l => {\r\n                return (\r\n                    <button onClick={() => props.onChangeLevel(l.level)} key={l.name}>\r\n                        {l.name}\r\n                    </button>\r\n                )}\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LevelPicker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as gameutils from '../gameutils';\r\nimport { Levels, GameState } from '../gameConstants';\r\nimport StepCounter from './stepcounter';\r\nimport GameField from './gamefield';\r\nimport GameStatusBar from './gamestatusbar';\r\nimport LevelPicker from './levelpicker';\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.init(props.level);\r\n        this.state = this.makeInitialState();\r\n    }\r\n\r\n    makeInitialState() {\r\n        return {\r\n            history: [{\r\n                guesses: Array(this.numCells).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            numFlags: 0,\r\n            startTime: undefined,\r\n            gameState: GameState.Ongoing\r\n        }\r\n    }\r\n\r\n    init(level) {\r\n        console.log(\"init(level = %s)\", JSON.stringify(level));\r\n        this.level = level;\r\n        this.width = level.width;\r\n        this.height = level.height;\r\n        this.numCells = this.width * this.height;\r\n        this.numMines = level.mines;\r\n        console.log(\"init: %dÃ—%d cells: %d mines: %d\", this.width, this.height, this.numCells, this.numMines)\r\n        console.assert(this.numCells > 0);\r\n    }\r\n\r\n    reset(level) {\r\n        console.log(\"RESET\");\r\n        this.init((level === undefined) ? this.level : level);\r\n        this.setState(this.makeInitialState());\r\n    }\r\n\r\n    handleClick(i, isFlag) {\r\n        if (this.state.gameState !== GameState.Ongoing)\r\n            return;\r\n\r\n        this.boardDirty = false;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const guesses = current.guesses.slice();\r\n        let gameState = this.state.gameState;\r\n\r\n        // init game on first click\r\n        if (this.state.startTime === undefined) {\r\n            this.setState( {startTime : new Date() } );\r\n            this.mines = gameutils.initMines(this.numMines, this.width, this.height, i);\r\n        }\r\n\r\n        let numFlags = this.state.numFlags;\r\n        if (isFlag === true) {\r\n            if (guesses[i] === 'ðŸš©') {\r\n                guesses[i] = null;\r\n                numFlags--;\r\n                this.boardDirty = true;\r\n            }\r\n            else if (guesses[i] === null) {\r\n                guesses[i] = 'ðŸš©';\r\n                numFlags++;\r\n                this.boardDirty = true;\r\n            }\r\n            this.setState({numFlags: numFlags});\r\n        } else {\r\n            if (guesses[i] === null) {\r\n                gameState = this.revealAt(guesses, i);\r\n            } else {\r\n                const numMinesToFind = this.mines[i];\r\n                let numGuessedMinesAround = 0;\r\n                let numUnguessedAround = 0;\r\n                for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height)) {\r\n                    if (guesses[neighbour] === 'ðŸš©')\r\n                        numGuessedMinesAround++;\r\n                    else if (guesses[neighbour] === null)\r\n                        numUnguessedAround++;\r\n                }\r\n                if (numUnguessedAround > 0) {\r\n                    if (numGuessedMinesAround >= numMinesToFind)\r\n                    for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                        if (guesses[neighbour] === null && (gameState = this.revealAt(guesses, neighbour)) === GameState.Loss)\r\n                            break;\r\n                }\r\n            }\r\n        }\r\n        if (gameState === GameState.Loss) {\r\n            this.setState({gameState: GameState.Loss});\r\n            this.onLoss(guesses, i);\r\n        }\r\n        if (this.checkWin(guesses)) {\r\n            this.setState({gameState: GameState.Win});\r\n        }\r\n        if (this.boardDirty === true) {\r\n            this.setState({\r\n                history: history.concat([{\r\n                    guesses: guesses,\r\n                }]),\r\n                stepNumber: history.length,\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWin(guesses) {\r\n        for (let i = 0; i < this.numCells; i++) {\r\n            // check that all non-mine cells are open\r\n            if (this.mines[i] !== 9 && (guesses[i] === null || guesses[i] === 'ðŸš©')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onLoss(guesses, i) {\r\n        for (let n = 0; n < this.numCells; ++n)\r\n            if (n !== i) {\r\n                // reveal unseen bombs\r\n                if (this.mines[n] === 9) {\r\n                    if (guesses[n] === null) {\r\n                        guesses[n] = 'ðŸ’£';\r\n                    }\r\n                // mark bad flags\r\n                } else if (guesses[n] === 'ðŸš©') {\r\n                    guesses[n] = \"ðŸš©ðŸ’£\";\r\n                }\r\n            }\r\n    }\r\n\r\n    // recursive reveal of an unguessed cell\r\n    revealAt(guesses, i) {\r\n        if (guesses[i] !== null)\r\n            return GameState.Ongoing;\r\n        if (this.mines[i] === 9) {\r\n            guesses[i] = 'ðŸ’¥';\r\n            this.boardDirty = true;\r\n            return GameState.Loss;\r\n        }\r\n        if (this.mines[i] === 0) {\r\n            guesses[i] = \"\";\r\n            this.boardDirty = true;\r\n            for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                if (this.revealAt(guesses, neighbour) === GameState.Loss)\r\n                    return GameState.Loss;\r\n        } else {\r\n            this.boardDirty = true;\r\n            guesses[i] = this.mines[i];\r\n        }\r\n        return GameState.Ongoing;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <GameStatusBar\r\n                minesLeft={this.numMines - this.state.numFlags}\r\n                gameReset={() => this.reset()}\r\n                emoji={this.state.gameState}\r\n                timeRunning={this.state.startTime !== undefined && this.state.gameState === GameState.Ongoing }\r\n                startTime={this.state.startTime}\r\n            />\r\n            <div className=\"game-board\">\r\n                <GameField\r\n                    width={this.width}\r\n                    height={this.height}\r\n                    guesses={current.guesses}\r\n                    onClick={(i) => this.handleClick(i, false)}\r\n                    onContextMenu={(i) => {this.handleClick(i, true);}}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <StepCounter\r\n                    currentStep={this.state.stepNumber}\r\n                    maxSteps={history.length - 1}\r\n                    onChange={(e) => this.setState({stepNumber: (e.target.value)})}\r\n                />\r\n                <LevelPicker onChangeLevel={(level) => this.reset(level)} />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGame.defaultProps = {\r\n    level: Levels.Easy\r\n}\r\n\r\nGame.propTypes = {\r\n    level: PropTypes.exact({\r\n        name: PropTypes.string,\r\n        mines: PropTypes.number,\r\n        width: PropTypes.number,\r\n        height: PropTypes.number,\r\n      })\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Levels } from './gameConstants';\r\nimport Game from './components/game';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n<Game level={Levels.Easy} />,\r\ndocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}