{"version":3,"sources":["gameConstants.js","gameutils.js","components/stepcounter.js","components/cell.js","components/gamefield.js","components/game.js","index.js"],"names":["Levels","Easy","mines","width","height","Medium","Expert","GameState","getIndexesAround","indexToPos","index","pos","x","y","minY","maxX","maxY","i","j","StepCounter","props","message","maxSteps","counter","type","min","max","value","currentStep","onChange","id","Cell","className","isNumber","Number","isInteger","onClick","onContextMenu","GameField","this","guesses","e","preventDefault","Array","from","keys","map","renderSquare","React","Component","defaultProps","Game","console","log","JSON","stringify","level","init","state","makeInitialState","history","numCells","fill","stepNumber","numFlags","gameState","numMines","assert","undefined","setState","isFlag","stateDirty","slice","length","startCell","lastCell","Math","floor","random","neighbour","gameutils","revealAt","numMinesToFind","numGuessedMinesAround","numUnguessedAround","onLoss","checkWin","concat","n","current","target","reset","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40195b97.chunk.js","sourcesContent":["export const Levels = {\r\n    Easy: {\r\n        mines: 10,\r\n        width:9,\r\n        height: 9\r\n    },\r\n    Medium: {\r\n        mines: 40,\r\n        width: 16,\r\n        height: 16\r\n    },\r\n    Expert: {\r\n        mines: 99,\r\n        width: 30,\r\n        height: 16\r\n    }\r\n};\r\n\r\nexport const GameState = {\r\n    Ongoing: 'ðŸ™‚',\r\n    Loss: 'ðŸ’€',\r\n    Win: 'ðŸ˜Ž'\r\n};\r\n","export function indexToPos(index, width) {\r\n    return [index % width, (index / width) >> 0]; // integer division hack\r\n}\r\n\r\n// Enumerate indexes around another index\r\nexport function* getIndexesAround(pos, width, height) {\r\n    const [x,y] = indexToPos(pos, width);\r\n    const minX = x === 0 ? 0 : x - 1;\r\n    const minY = y === 0 ? 0 : y - 1;\r\n    const maxX = x === width - 1 ? x : x + 1;\r\n    const maxY = y === height - 1 ? y : y + 1;\r\n    for (let i = minX; i <= maxX; ++i)\r\n        for (let j = minY; j <= maxY; ++j)\r\n            if (x !== i || y !== j) {\r\n                yield i + j * width;\r\n            }\r\n}\r\n\r\nexport function initMines(numMines, width, height, startCell) {\r\n    const numCells = width * height;\r\n    var mines = Array(numCells).fill(0);\r\n    for (let i = 1; i <= numMines; ++i) {\r\n        let lastCell = numCells - i;\r\n        let j = Math.floor(Math.random() * lastCell);\r\n        while (j === startCell || mines[j] === 9) {\r\n            j = lastCell++;\r\n        }\r\n        console.assert(mines[j] !== 9);\r\n        mines[j] = 9;\r\n        const neighbourIndices = Array.from(getIndexesAround(j, width, height));\r\n        for (const neighbour of neighbourIndices)\r\n            mines[neighbour] = mines[neighbour] === 9 ? 9 : mines[neighbour] + 1;\r\n    }\r\n    return mines;\r\n}\r\n","const StepCounter = (props) => {\r\n    const message = (props.maxSteps === 0) ? \"\" : \"Steps: \";\r\n    const counter = <input type=\"range\" min=\"0\" max={props.maxSteps} value={props.currentStep} onChange={props.onChange} />;\r\n    return (\r\n        <div id=\"stepcounter\">\r\n            {message}\r\n            {(props.maxSteps === 0) ? \"\" : counter}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepCounter;\r\n","const Cell = (props) => {\r\n    let className = \"square\";\r\n    let value = props.value;\r\n    const isNumber = Number.isInteger(value) && value > 0 && value <= 9;\r\n    if (isNumber)\r\n        className += \" square_number_\" + value;\r\n    if (isNumber || value === \"\" || value === 'ðŸ’¥')\r\n        className += \" square_revealed\";\r\n    if (value === \"ðŸš©ðŸ’£\") {\r\n        value = 'ðŸš©';\r\n        className += \" square_bad_flag\";\r\n    }\r\n    return (\r\n        <button className={className} onClick={props.onClick} onContextMenu={props.onContextMenu}>\r\n        {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from './cell';\r\nimport { Levels } from '../gameConstants';\r\n\r\nclass GameField extends React.Component {\r\n    renderSquare(i) {\r\n        return <Cell\r\n            key={i}\r\n            value={this.props.guesses[i]}\r\n            onClick={(e) => { this.props.onClick(i); e.preventDefault(); }}\r\n            onContextMenu={(e) => { this.props.onContextMenu(i); e.preventDefault(); }}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            {Array.from(Array(this.props.height).keys()).map(y => {\r\n                return (\r\n                <div key={y} className=\"board-row\">\r\n                    {Array.from(Array(this.props.width).keys()).map(x => this.renderSquare(x + y * this.props.width) )}\r\n                </div>);\r\n                }\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGameField.defaultProps = {\r\n    height: Levels.Easy.height, width: Levels.Easy.width\r\n}\r\nGameField.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n}\r\n\r\nexport default GameField;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as gameutils from '../gameutils';\r\nimport { Levels, GameState } from '../gameConstants';\r\nimport StepCounter from './stepcounter';\r\nimport GameField from './gamefield';\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"new game, level: \" + JSON.stringify(props.level))\r\n        this.init(props.level);\r\n        this.state = this.makeInitialState();\r\n    }\r\n\r\n    makeInitialState() {\r\n        return {\r\n            history: [{\r\n                guesses: Array(this.numCells).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            numFlags: 0,\r\n            gameState: GameState.Ongoing\r\n        }\r\n    }\r\n\r\n    init(level) {\r\n        this.level = level;\r\n        this.width = level.width;\r\n        this.height = level.height;\r\n        this.numCells = this.width * this.height;\r\n        this.numMines = level.mines;\r\n        console.log(\"init: %dÃ—%d cells: %d mines: %d\", this.width, this.height, this.numCells, this.numMines)\r\n        console.assert(this.numCells > 0);\r\n    }\r\n\r\n    reset(level) {\r\n        this.init((level === undefined) ? this.level : level);\r\n        this.setState(this.makeInitialState());\r\n    }\r\n\r\n    handleClick(i, isFlag) {\r\n        if (this.state.gameState !== GameState.Ongoing)\r\n            return;\r\n        this.stateDirty = false;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const guesses = current.guesses.slice();\r\n        let gameState = this.state.gameState;\r\n        if (this.state.stepNumber === 0) {\r\n            this.mines = gameutils.initMines(this.numMines, this.width, this.height, i);\r\n        }\r\n        let numFlags = this.state.numFlags;\r\n        if (isFlag === true) {\r\n            if (guesses[i] === 'ðŸš©') {\r\n                guesses[i] = null;\r\n                numFlags--;\r\n                this.stateDirty = true;\r\n            }\r\n            else if (guesses[i] === null) {\r\n                guesses[i] = 'ðŸš©';\r\n                numFlags++;\r\n                this.stateDirty = true;\r\n            }\r\n            this.setState({numFlags: numFlags});\r\n        } else {\r\n            if (guesses[i] === null) {\r\n                gameState = this.revealAt(guesses, i);\r\n            } else {\r\n                const numMinesToFind = this.mines[i];\r\n                let numGuessedMinesAround = 0;\r\n                let numUnguessedAround = 0;\r\n                for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height)) {\r\n                    if (guesses[neighbour] === 'ðŸš©')\r\n                        numGuessedMinesAround++;\r\n                    else if (guesses[neighbour] === null)\r\n                        numUnguessedAround++;\r\n                }\r\n                if (numUnguessedAround > 0) {\r\n                    if (numGuessedMinesAround >= numMinesToFind)\r\n                    for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                        if (guesses[neighbour] === null && (gameState = this.revealAt(guesses, neighbour)) === GameState.Loss)\r\n                            break;\r\n                }\r\n            }\r\n        }\r\n        if (gameState === GameState.Loss) {\r\n            this.setState({gameState: GameState.Loss});\r\n            this.onLoss(guesses, i);\r\n        }\r\n        if (this.checkWin(guesses)) {\r\n            this.setState({gameState: GameState.Win});\r\n        }\r\n        if (this.stateDirty === true) {\r\n            this.setState({\r\n                history: history.concat([{\r\n                    guesses: guesses,\r\n                }]),\r\n                stepNumber: history.length,\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWin(guesses) {\r\n        for (let i = 0; i < this.numCells; i++) {\r\n            // check that all non-mine cells are open\r\n            if (this.mines[i] !== 9 && (guesses[i] === null || guesses[i] === 'ðŸš©')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onLoss(guesses, i) {\r\n        for (let n = 0; n < this.numCells; ++n)\r\n            if (n !== i) {\r\n                // reveal unseen bombs\r\n                if (this.mines[n] === 9) {\r\n                    if (guesses[n] === null) {\r\n                        guesses[n] = 'ðŸ’£';\r\n                    }\r\n                // mark bad flags\r\n                } else if (guesses[n] === 'ðŸš©') {\r\n                    guesses[n] = \"ðŸš©ðŸ’£\";\r\n                }\r\n            }\r\n    }\r\n\r\n    // recursive reveal of an unguessed cell\r\n    revealAt(guesses, i) {\r\n        if (guesses[i] !== null)\r\n            return GameState.Ongoing;\r\n        if (this.mines[i] === 9) {\r\n            guesses[i] = 'ðŸ’¥';\r\n            this.stateDirty = true;\r\n            return GameState.Loss;\r\n        }\r\n        if (this.mines[i] === 0) {\r\n            guesses[i] = \"\";\r\n            this.stateDirty = true;\r\n            for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                if (this.revealAt(guesses, neighbour) === GameState.Loss)\r\n                    return GameState.Loss;\r\n        } else {\r\n            this.stateDirty = true;\r\n            guesses[i] = this.mines[i];\r\n        }\r\n        return GameState.Ongoing;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        const counter = (\r\n                <StepCounter\r\n                    currentStep={this.state.stepNumber}\r\n                    maxSteps={history.length - 1}\r\n                    onChange={(e) => this.setState({stepNumber: (e.target.value)})}\r\n                />\r\n        );\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-status\">\r\n                <div className=\"mine-counter status_button\">\r\n                    {this.numMines - this.state.numFlags}\r\n                </div>\r\n                <div className=\"emoji status_button\" onClick={() => this.reset()}>\r\n                    {this.state.gameState}\r\n                </div>\r\n            </div>\r\n            <div className=\"game-board\">\r\n                <GameField\r\n                    width={this.width}\r\n                    height={this.height}\r\n                    guesses={current.guesses}\r\n                    onClick={(i) => this.handleClick(i, false)}\r\n                    onContextMenu={(i) => {this.handleClick(i, true);}}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                {counter}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGame.defaultProps = {\r\n    level: Levels.Easy\r\n}\r\n\r\nGame.propTypes = {\r\n    level: PropTypes.exact({\r\n        mines: PropTypes.number,\r\n        width: PropTypes.number,\r\n        height: PropTypes.number,\r\n      })\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Levels } from './gameConstants';\r\nimport Game from './components/game';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n<Game level={Levels.Easy} />,\r\ndocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}