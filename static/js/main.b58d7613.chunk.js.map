{"version":3,"sources":["gameConstants.js","gameutils.js","components/stepcounter.js","components/cell.js","components/gamefield.js","components/timer.js","components/gamestatusbar.js","components/levelpicker.js","components/game.js","index.js"],"names":["Levels","Easy","name","mines","width","height","Medium","Expert","GameState","getIndexesAround","indexToPos","index","pos","x","y","minY","maxX","maxY","i","j","StepCounter","props","message","maxSteps","counter","type","min","max","value","currentStep","onChange","id","Cell","className","isNumber","Number","isInteger","peekedAt","onClick","onContextMenu","onMouseDown","onMouseUp","defaultProps","GameField","state","cellsPeaked","this","guesses","e","preventDefault","peekAt","stopPeek","includes","gameutils","neighbour","push","setState","Array","from","keys","map","renderSquare","React","Component","Timer","useState","time","setTime","useEffect","timer","updateTime","undefined","startTime","isRunning","msElapsed","Date","Math","MaxTime","floor","setInterval","clearInterval","toLocaleString","minimumFractionDigits","GameStatusBar","emoji","gameState","getEmoji","minesLeft","gameReset","LevelPicker","levels","level","l","onChangeLevel","Game","init","makeInitialState","history","numCells","fill","stepNumber","numFlags","numMines","console","log","assert","isFlag","boardDirty","slice","length","startCell","lastCell","random","revealAt","numMinesToFind","numGuessedMinesAround","numUnguessedAround","onLoss","checkWin","concat","n","current","showSteps","reset","handleClick","target","ReactDOM","render","href","src","alt","document","getElementById"],"mappings":"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","file":"static/js/main.b58d7613.chunk.js","sourcesContent":["export const Levels = {\r\n    Easy: {\r\n        name: \"Easy\",\r\n        mines: 10,\r\n        width:9,\r\n        height: 9\r\n    },\r\n    Medium: {\r\n        name: \"Medium\",\r\n        mines: 40,\r\n        width: 16,\r\n        height: 16\r\n    },\r\n    Expert: {\r\n        name: \"Expert\",\r\n        mines: 99,\r\n        width: 30,\r\n        height: 16\r\n    }\r\n};\r\n\r\nexport const GameState = {\r\n    NewGame: 0,\r\n    Ongoing: 1,\r\n    Loss: 2,\r\n    Win: 3\r\n};\r\n\r\nexport const MaxTime = 999;\r\n","export function indexToPos(index, width) {\r\n    return [index % width, (index / width) >> 0]; // integer division hack\r\n}\r\n\r\n// Enumerate indexes around another index\r\nexport function* getIndexesAround(pos, width, height) {\r\n    const [x,y] = indexToPos(pos, width);\r\n    const minX = x === 0 ? 0 : x - 1;\r\n    const minY = y === 0 ? 0 : y - 1;\r\n    const maxX = x === width - 1 ? x : x + 1;\r\n    const maxY = y === height - 1 ? y : y + 1;\r\n    for (let i = minX; i <= maxX; ++i)\r\n        for (let j = minY; j <= maxY; ++j)\r\n            if (x !== i || y !== j) {\r\n                yield i + j * width;\r\n            }\r\n}\r\n\r\nexport function initMines(numMines, width, height, startCell) {\r\n    const numCells = width * height;\r\n    var mines = Array(numCells).fill(0);\r\n    for (let i = 1; i <= numMines; ++i) {\r\n        let lastCell = numCells - i;\r\n        let j = Math.floor(Math.random() * lastCell);\r\n        while (j === startCell || mines[j] === 9) {\r\n            j = lastCell++;\r\n        }\r\n        console.assert(mines[j] !== 9);\r\n        mines[j] = 9;\r\n        const neighbourIndices = Array.from(getIndexesAround(j, width, height));\r\n        for (const neighbour of neighbourIndices)\r\n            mines[neighbour] = mines[neighbour] === 9 ? 9 : mines[neighbour] + 1;\r\n    }\r\n    return mines;\r\n}\r\n","const StepCounter = (props) => {\r\n    const message = (props.maxSteps === 0) ? \"\" : \"Steps: \";\r\n    const counter = <input type=\"range\" min=\"0\" max={props.maxSteps} value={props.currentStep} onChange={props.onChange} />;\r\n    return (\r\n        <div id=\"stepcounter\">\r\n            {message}\r\n            {(props.maxSteps === 0) ? \"\" : counter}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepCounter;\r\n","import propTypes from \"prop-types\";\r\n\r\nconst Cell = (props) => {\r\n    let className = \"square\";\r\n    let value = props.value;\r\n    const isNumber = Number.isInteger(value) && value > 0 && value <= 9;\r\n    if (isNumber)\r\n        className += \" square_number_\" + value;\r\n    if (value === \"🚩💣\") {\r\n        value = '🚩';\r\n        className += \" square_bad_flag\";\r\n    }\r\n    if (isNumber || value === \"\"\r\n        || value === '💥'\r\n        || (className === \"square\" && props.peekedAt && value !== '🚩'))\r\n        className += \" square_revealed\";\r\n    return (\r\n        <button\r\n            className={className}\r\n            onClick={props.onClick}\r\n            onContextMenu={props.onContextMenu}\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n        >\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nCell.defaultProps = {\r\n    peekedAt: false,\r\n}\r\n\r\nCell.propTypes = {\r\n    peekedAt: propTypes.bool,\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from './cell';\r\nimport * as gameutils from '../gameutils';\r\nimport { Levels } from '../gameConstants';\r\n\r\nclass GameField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { cellsPeaked: []};\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Cell\r\n            key={i}\r\n            value={this.props.guesses[i]}\r\n            onClick={(e) => { this.props.onClick(i); e.preventDefault(); }}\r\n            onContextMenu={(e) => { this.props.onContextMenu(i); e.preventDefault(); }}\r\n            onMouseDown={(e) => { this.peekAt(i); e.preventDefault(); }}\r\n            onMouseUp={(e) => { this.stopPeek(); e.preventDefault(); }}\r\n            peekedAt={this.state.cellsPeaked.includes(i)}\r\n        />;\r\n    }\r\n\r\n    peekAt(i) {\r\n        if (Number.isInteger(this.props.guesses[i])) {\r\n            const cellsPeaked = [];\r\n            for (const neighbour of gameutils.getIndexesAround(i, this.props.width, this.props.height))\r\n                cellsPeaked.push(neighbour);\r\n            this.setState( { cellsPeaked: cellsPeaked });\r\n        }\r\n    }\r\n\r\n    stopPeek() {\r\n        this.setState( { cellsPeaked: [] } );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            Array.from(Array(this.props.height).keys()).map(y => {\r\n                return (\r\n                <div key={y} className=\"board-row\">\r\n                    {Array.from(Array(this.props.width).keys()).map(x => this.renderSquare(x + y * this.props.width) )}\r\n                </div>);\r\n                }\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nGameField.defaultProps = {\r\n    height: Levels.Easy.height,\r\n    width: Levels.Easy.width\r\n}\r\nGameField.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n}\r\n\r\nexport default GameField;\r\n","import propTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MaxTime } from '../gameConstants';\r\n\r\nfunction Timer(props) {\r\n    const [time, setTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const updateTime = () => {\r\n            if (props.startTime === undefined && !props.isRunning)\r\n                return 0;\r\n            const msElapsed = +new Date() - +props.startTime;\r\n            return Math.min(MaxTime * 10, Math.floor(msElapsed / 100));\r\n        };\r\n        let timer;\r\n        if (props.isRunning) {\r\n            timer=setInterval(() => {\r\n                setTime(updateTime());\r\n            }, 100);\r\n        } else\r\n            setTime(updateTime());\r\n        // Clear timeout if the component is unmounted\r\n        return () => {\r\n            if (timer !== undefined)\r\n                clearInterval(timer);\r\n        };\r\n    }, [props.isRunning, props.startTime]);\r\n\r\n    return (\r\n    <div className={props.className}>\r\n        {(time/10).toLocaleString(undefined, { minimumFractionDigits: 1}) }\r\n    </div>\r\n    );\r\n}\r\n\r\nTimer.defaultProps = {\r\n    isRunning: false,\r\n    startTime: undefined\r\n}\r\n\r\nTimer.propTypes = {\r\n    isRunning: propTypes.bool,\r\n    startTime: propTypes.instanceOf(Date)\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Timer from './timer';\r\nimport { GameState } from '../gameConstants';\r\n\r\nconst getEmoji = (gameState) => {\r\n    switch (gameState) {\r\n        case GameState.Loss:\r\n            return '💀';\r\n        case GameState.Win:\r\n            return '😎';\r\n        default:\r\n            return '🙂';\r\n    };\r\n}\r\n\r\nconst GameStatusBar = (props) => {\r\n    const emoji = getEmoji(props.gameState);\r\n    return (\r\n        <div className=\"game-status\">\r\n            <div className=\"mine-counter status_button\">\r\n                {props.minesLeft}\r\n            </div>\r\n            <div className=\"emoji status_button\" onClick={props.gameReset}>\r\n                {emoji}\r\n            </div>\r\n            <Timer className=\"timer status_button\"\r\n                isRunning={props.gameState === GameState.Ongoing}\r\n                startTime={props.startTime}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nGameStatusBar.defaultProps = {\r\n    minesLeft: 0,\r\n    startTime: undefined,\r\n    gameState: GameState.NewGame\r\n}\r\n\r\nGameStatusBar.propTypes = {\r\n    minesLeft: PropTypes.number,\r\n    gameState: PropTypes.number,\r\n    startTime: PropTypes.instanceOf(Date)\r\n}\r\n\r\nexport default GameStatusBar;\r\n","import React from 'react';\r\nimport { Levels } from '../gameConstants'\r\n\r\nconst LevelPicker = (props) => {\r\n    const levels = [\r\n        {\r\n            name: 'Easy',\r\n            level: Levels.Easy\r\n        },\r\n        {\r\n            name: 'Medium',\r\n            level: Levels.Medium\r\n        },\r\n        {\r\n            name: 'Expert',\r\n            level: Levels.Expert\r\n        },\r\n    ]\r\n    return (\r\n        <div className='level-picker'>\r\n            {levels.map(l => {\r\n                return (\r\n                    <button onClick={() => props.onChangeLevel(l.level)} key={l.name}>\r\n                        {l.name}\r\n                    </button>\r\n                )}\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LevelPicker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as gameutils from '../gameutils';\r\nimport { Levels, GameState } from '../gameConstants';\r\nimport StepCounter from './stepcounter';\r\nimport GameField from './gamefield';\r\nimport GameStatusBar from './gamestatusbar';\r\nimport LevelPicker from './levelpicker';\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.init(props.level);\r\n        this.state = this.makeInitialState();\r\n    }\r\n\r\n    makeInitialState() {\r\n        return {\r\n            history: [{\r\n                guesses: Array(this.numCells).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            numFlags: 0,\r\n            startTime: undefined,\r\n            gameState: GameState.NewGame\r\n        }\r\n    }\r\n\r\n    init(level) {\r\n        this.level = level;\r\n        this.width = level.width;\r\n        this.height = level.height;\r\n        this.numCells = this.width * this.height;\r\n        this.numMines = level.mines;\r\n        console.log(\"init %s: %d×%d, %d cells, %d mines\", level.name, this.width, this.height, this.numCells, this.numMines)\r\n        console.assert(this.numCells > 0);\r\n    }\r\n\r\n    reset(level) {\r\n        console.log(\"RESET\");\r\n        this.init((level === undefined) ? this.level : level);\r\n        this.setState(this.makeInitialState());\r\n    }\r\n\r\n    handleClick(i, isFlag) {\r\n        let gameState = this.state.gameState;\r\n        if (gameState !== GameState.Ongoing && gameState !== GameState.NewGame)\r\n            return;\r\n\r\n        this.boardDirty = false;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const guesses = current.guesses.slice();\r\n        \r\n\r\n        // init game on first click\r\n        if (gameState === GameState.NewGame) {\r\n            this.setState( {startTime : new Date(), gameState: GameState.Ongoing } );\r\n            this.mines = gameutils.initMines(this.numMines, this.width, this.height, i);\r\n        }\r\n\r\n        let numFlags = this.state.numFlags;\r\n        if (isFlag === true) {\r\n            if (guesses[i] === '🚩') {\r\n                guesses[i] = null;\r\n                numFlags--;\r\n                this.boardDirty = true;\r\n            }\r\n            else if (guesses[i] === null) {\r\n                guesses[i] = '🚩';\r\n                numFlags++;\r\n                this.boardDirty = true;\r\n            }\r\n            this.setState({numFlags: numFlags});\r\n        } else {\r\n            if (guesses[i] === null) {\r\n                gameState = this.revealAt(guesses, i);\r\n            } else {\r\n                const numMinesToFind = this.mines[i];\r\n                let numGuessedMinesAround = 0;\r\n                let numUnguessedAround = 0;\r\n                for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height)) {\r\n                    if (guesses[neighbour] === '🚩')\r\n                        numGuessedMinesAround++;\r\n                    else if (guesses[neighbour] === null)\r\n                        numUnguessedAround++;\r\n                }\r\n                if (numUnguessedAround > 0) {\r\n                    if (numGuessedMinesAround >= numMinesToFind)\r\n                        for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                            if (guesses[neighbour] === null && (gameState = this.revealAt(guesses, neighbour)) === GameState.Loss)\r\n                                break;\r\n                }\r\n            }\r\n        }\r\n        if (gameState === GameState.Loss) {\r\n            this.setState({gameState: GameState.Loss});\r\n            this.onLoss(guesses, i);\r\n        }\r\n        if (this.checkWin(guesses)) {\r\n            this.setState({gameState: GameState.Win});\r\n        }\r\n        if (this.boardDirty === true) {\r\n            this.setState({\r\n                history: history.concat([{\r\n                    guesses: guesses,\r\n                }]),\r\n                stepNumber: history.length,\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWin(guesses) {\r\n        for (let i = 0; i < this.numCells; i++) {\r\n            // check that all non-mine cells are open\r\n            if (this.mines[i] !== 9 && (guesses[i] === null || guesses[i] === '🚩')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onLoss(guesses, i) {\r\n        for (let n = 0; n < this.numCells; ++n)\r\n            if (n !== i) {\r\n                // reveal unseen bombs\r\n                if (this.mines[n] === 9) {\r\n                    if (guesses[n] === null) {\r\n                        guesses[n] = '💣';\r\n                    }\r\n                // mark bad flags\r\n                } else if (guesses[n] === '🚩') {\r\n                    guesses[n] = \"🚩💣\";\r\n                }\r\n            }\r\n    }\r\n\r\n    // recursive reveal of an unguessed cell\r\n    revealAt(guesses, i) {\r\n        if (guesses[i] !== null)\r\n            return GameState.Ongoing;\r\n        if (this.mines[i] === 9) {\r\n            guesses[i] = '💥';\r\n            this.boardDirty = true;\r\n            return GameState.Loss;\r\n        }\r\n        if (this.mines[i] === 0) {\r\n            guesses[i] = \"\";\r\n            this.boardDirty = true;\r\n            for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                if (this.revealAt(guesses, neighbour) === GameState.Loss)\r\n                    return GameState.Loss;\r\n        } else {\r\n            this.boardDirty = true;\r\n            guesses[i] = this.mines[i];\r\n        }\r\n        return GameState.Ongoing;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const showSteps = this.state.gameState === GameState.Loss || this.state.gameState === GameState.Win;\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <GameStatusBar\r\n                minesLeft={this.numMines - this.state.numFlags}\r\n                gameReset={() => this.reset()}\r\n                gameState={this.state.gameState}\r\n                startTime={this.state.startTime}\r\n            />\r\n            <div className=\"game-board\">\r\n                <GameField\r\n                    width={this.width}\r\n                    height={this.height}\r\n                    guesses={current.guesses}\r\n                    onClick={(i) => this.handleClick(i, false)}\r\n                    onContextMenu={(i) => {this.handleClick(i, true);}}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <StepCounter\r\n                    currentStep={this.state.stepNumber}\r\n                    maxSteps={showSteps ? history.length - 1 : 0}\r\n                    onChange={(e) => this.setState({stepNumber: (e.target.value)})}\r\n                />\r\n                <LevelPicker onChangeLevel={(level) => this.reset(level)} />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGame.defaultProps = {\r\n    level: Levels.Easy\r\n}\r\n\r\nGame.propTypes = {\r\n    level: PropTypes.exact({\r\n        name: PropTypes.string,\r\n        mines: PropTypes.number,\r\n        width: PropTypes.number,\r\n        height: PropTypes.number,\r\n      })\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Levels } from './gameConstants';\r\nimport Game from './components/game';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n(\r\n<div id=\"content\">\r\n    <Game level={Levels.Easy} />\r\n    <div id=\"footer\">\r\n        <a href=\"https://github.com/vizigr0u/react-minesweeper\">\r\n            <img src=\"https://github.githubassets.com/images/icons/emoji/octocat.png\" alt=\"github-octocat\" />\r\n            Clone on github\r\n        </a>\r\n    </div>\r\n</div>),\r\ndocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}