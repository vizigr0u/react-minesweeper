{"version":3,"sources":["index.js"],"names":["getIndexesAround","GameState","Cell","props","className","value","isNumber","Number","isInteger","onClick","onContextMenu","StepCounter","message","maxSteps","counter","type","min","max","currentStep","onChange","id","Field","i","this","guesses","e","preventDefault","Array","from","height","keys","map","y","width","x","renderSquare","React","Component","defaultProps","Game","numCells","numMines","Math","floor","mineRatio","console","assert","initialState","history","fill","stepNumber","numFlags","gameState","state","setState","isFlag","stateDirty","slice","length","mines","startCell","lastCell","j","random","neighbour","initMines","revealAt","numMinesToFind","numGuessedMinesAround","numUnguessedAround","onLoss","checkWin","concat","n","current","target","reset","handleClick","IndexToPos","index","pos","minY","maxX","maxY","ReactDOM","render","settings","name","size","Easy","document","getElementById"],"mappings":"4OAuSUA,GA/QJC,EACO,eADPA,EAEI,eAFJA,EAGG,eAGT,SAASC,EAAKC,GACV,IAAIC,EAAY,SACZC,EAAQF,EAAME,MACZC,EAAWC,OAAOC,UAAUH,IAAUA,EAAQ,GAAKA,GAAS,EASlE,OARIC,IACAF,GAAa,kBAAoBC,IACjCC,GAAsB,KAAVD,GAA0B,iBAAVA,KAC5BD,GAAa,oBACH,6BAAVC,IACAA,EAAQ,eACRD,GAAa,oBAGb,wBAAQA,UAAWA,EAAWK,QAASN,EAAMM,QAASC,cAAeP,EAAMO,cAA3E,SACCL,IAKT,SAASM,EAAYR,GACjB,IAAMS,EAA8B,IAAnBT,EAAMU,SAAkB,GAAK,UACxCC,EAAU,uBAAOC,KAAK,QAAQC,IAAI,IAAIC,IAAKd,EAAMU,SAAUR,MAAOF,EAAMe,YAAaC,SAAUhB,EAAMgB,WAC3G,OACI,sBAAKC,GAAG,cAAR,UACKR,EACoB,IAAnBT,EAAMU,SAAkB,GAAKC,K,IAMrCO,E,kKACF,SAAaC,GAAI,IAAD,OACZ,OAAO,cAACpB,EAAD,CAEHG,MAAOkB,KAAKpB,MAAMqB,QAAQF,GAC1Bb,QAAS,SAACgB,GAAQ,EAAKtB,MAAMM,QAAQa,GAAIG,EAAEC,kBAC3ChB,cAAe,SAACe,GAAQ,EAAKtB,MAAMO,cAAcY,GAAIG,EAAEC,mBAHlDJ,K,oBAOb,WAAU,IAAD,OACL,OACA,8BACKK,MAAMC,KAAKD,MAAMJ,KAAKpB,MAAM0B,QAAQC,QAAQC,KAAI,SAAAC,GAC7C,OACA,qBAAa5B,UAAU,YAAvB,SACKuB,MAAMC,KAAKD,MAAM,EAAKxB,MAAM8B,OAAOH,QAAQC,KAAI,SAAAG,GAAC,OAAI,EAAKC,aAAaD,EAAIF,EAAI,EAAK7B,MAAM8B,WADpFD,Y,GAfNI,IAAMC,WAyB1BhB,EAAMiB,aAAe,CACjBT,OAAQ,EAAGI,MAAO,G,IAOhBM,E,kDACF,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IACDqC,SAAWrC,EAAM8B,MAAQ9B,EAAM0B,OACpC,EAAKY,SAAWC,KAAKC,MAAM,EAAKH,SAAW,EAAKrC,MAAMyC,WACtDC,QAAQC,OAAO,EAAKN,SAAW,GAC/B,EAAKO,aAAe,CAChBC,QAAS,CAAC,CACNxB,QAASG,MAAM,EAAKa,UAAUS,KAAK,QAEvCC,WAAY,EACZC,SAAU,EACVC,UAAWnD,GAEf,EAAKoD,MAAQ,EAAKN,aAbH,E,yCAgBnB,WACIxB,KAAK+B,SAAS/B,KAAKwB,gB,yBAGvB,SAAYzB,EAAGiC,GACX,GAAIhC,KAAK8B,MAAMD,YAAcnD,EAA7B,CAEAsB,KAAKiC,YAAa,EAClB,IAAMR,EAAUzB,KAAK8B,MAAML,QAAQS,MAAM,EAAGlC,KAAK8B,MAAMH,WAAa,GAE9D1B,EADUwB,EAAQA,EAAQU,OAAS,GACjBlC,QAAQiC,QAC5BL,EAAY7B,KAAK8B,MAAMD,UACG,IAA1B7B,KAAK8B,MAAMH,aACX3B,KAAKoC,MAoJjB,SAAmBlB,EAAUR,EAAOJ,EAAQ+B,GAGxC,IAFA,IAAMpB,EAAWP,EAAQJ,EACrB8B,EAAQhC,MAAMa,GAAUS,KAAK,GACxB3B,EAAI,EAAGA,GAAKmB,IAAYnB,EAAG,CAGhC,IAFA,IAAIuC,EAAWrB,EAAWlB,EACtBwC,EAAIpB,KAAKC,MAAMD,KAAKqB,SAAWF,GAC5BC,IAAMF,GAA0B,IAAbD,EAAMG,IAC5BA,EAAID,IAERhB,QAAQC,OAAoB,IAAba,EAAMG,IACrBH,EAAMG,GAAK,EAEX,IADA,IACA,MADyBnC,MAAMC,KAAK5B,EAAiB8D,EAAG7B,EAAOJ,IAC/D,gBAAK,IAAMmC,EAAS,KAChBL,EAAMK,GAAkC,IAArBL,EAAMK,GAAmB,EAAIL,EAAMK,GAAa,GAE3E,OAAOL,EAnKcM,CAAU1C,KAAKkB,SAAUlB,KAAKpB,MAAM8B,MAAOV,KAAKpB,MAAM0B,OAAQP,IAE/E,IAAI6B,EAAW5B,KAAK8B,MAAMF,SAC1B,IAAe,IAAXI,EACmB,iBAAf/B,EAAQF,IACRE,EAAQF,GAAK,KACb6B,IACA5B,KAAKiC,YAAa,GAEE,OAAfhC,EAAQF,KACbE,EAAQF,GAAK,eACb6B,IACA5B,KAAKiC,YAAa,GAEtBjC,KAAK+B,SAAS,CAACH,SAAUA,SAEzB,GAAmB,OAAf3B,EAAQF,GACR8B,EAAY7B,KAAK2C,SAAS1C,EAASF,OAChC,CACH,IADG,EACG6C,EAAiB5C,KAAKoC,MAAMrC,GAC9B8C,EAAwB,EACxBC,EAAqB,EAHtB,cAIqBrE,EAAiBsB,EAAGC,KAAKpB,MAAM8B,MAAOV,KAAKpB,MAAM0B,SAJtE,IAIH,2BAAkF,CAAC,IAAxEmC,EAAuE,QACnD,iBAAvBxC,EAAQwC,GACRI,IAC4B,OAAvB5C,EAAQwC,IACbK,KARL,8BAUH,GAAIA,EAAqB,GACjBD,GAAyBD,EAA7B,qBACwBnE,EAAiBsB,EAAGC,KAAKpB,MAAM8B,MAAOV,KAAKpB,MAAM0B,SADzE,IACA,gCAAWmC,EAAX,QACI,GAA2B,OAAvBxC,EAAQwC,KAAwBZ,EAAY7B,KAAK2C,SAAS1C,EAASwC,MAAgB/D,EACnF,OAHR,gCAORmD,IAAcnD,IACdsB,KAAK+B,SAAS,CAACF,UAAWnD,IAC1BsB,KAAK+C,OAAO9C,EAASF,IAErBC,KAAKgD,SAAS/C,IACdD,KAAK+B,SAAS,CAACF,UAAWnD,KAEN,IAApBsB,KAAKiC,YACLjC,KAAK+B,SAAS,CACVN,QAASA,EAAQwB,OAAO,CAAC,CACrBhD,QAASA,KAEb0B,WAAYF,EAAQU,Y,sBAKhC,SAASlC,GACL,IAAK,IAAIF,EAAI,EAAGA,EAAIC,KAAKiB,SAAUlB,IAE/B,GAAsB,IAAlBC,KAAKoC,MAAMrC,KAA4B,OAAfE,EAAQF,IAA8B,iBAAfE,EAAQF,IACvD,OAAO,EAGf,OAAO,I,oBAGX,SAAOE,EAASF,GACZ,IAAK,IAAImD,EAAI,EAAGA,EAAIlD,KAAKiB,WAAYiC,EAC7BA,IAAMnD,IAEgB,IAAlBC,KAAKoC,MAAMc,GACQ,OAAfjD,EAAQiD,KACRjD,EAAQiD,GAAK,gBAGK,iBAAfjD,EAAQiD,KACfjD,EAAQiD,GAAK,+B,sBAM7B,SAASjD,EAASF,GACd,GAAmB,OAAfE,EAAQF,GACR,OAAOrB,EACX,GAAsB,IAAlBsB,KAAKoC,MAAMrC,GAGX,OAFAE,EAAQF,GAAK,eACbC,KAAKiC,YAAa,EACXvD,EAEX,GAAsB,IAAlBsB,KAAKoC,MAAMrC,GAAU,CACrBE,EAAQF,GAAK,GACbC,KAAKiC,YAAa,EAFG,oBAGGxD,EAAiBsB,EAAGC,KAAKpB,MAAM8B,MAAOV,KAAKpB,MAAM0B,SAHpD,IAGrB,gCAAWmC,EAAX,QACI,GAAIzC,KAAK2C,SAAS1C,EAASwC,KAAe/D,EACtC,OAAOA,GALM,oCAOrBsB,KAAKiC,YAAa,EAClBhC,EAAQF,GAAKC,KAAKoC,MAAMrC,GAE5B,OAAOrB,I,oBAGX,WAAU,IAAD,OACC+C,EAAUzB,KAAK8B,MAAML,QACrB0B,EAAU1B,EAAQzB,KAAK8B,MAAMH,YAE7BpC,EACE,cAACH,EAAD,CACIO,YAAaK,KAAK8B,MAAMH,WACxBrC,SAAUmC,EAAQU,OAAS,EAC3BvC,SAAU,SAACM,GAAD,OAAO,EAAK6B,SAAS,CAACJ,WAAazB,EAAEkD,OAAOtE,WAIlE,OACA,sBAAKD,UAAU,OAAf,UACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,6BAAf,SACKmB,KAAKkB,SAAWlB,KAAK8B,MAAMF,WAEhC,qBAAK/C,UAAU,sBAAsBK,QAAS,kBAAM,EAAKmE,SAAzD,SACKrD,KAAK8B,MAAMD,eAGpB,qBAAKhD,UAAU,aAAf,SACI,cAACiB,EAAD,CACIY,MAAOV,KAAKpB,MAAM8B,MAClBJ,OAAQN,KAAKpB,MAAM0B,OACnBL,QAASkD,EAAQlD,QACjBf,QAAS,SAACa,GAAD,OAAO,EAAKuD,YAAYvD,GAAG,IACpCZ,cAAe,SAACY,GAAO,EAAKuD,YAAYvD,GAAG,QAGnD,qBAAKlB,UAAU,YAAf,SACKU,W,GAlKEsB,IAAMC,WAoMzB,SAASyC,EAAWC,EAAO9C,GACvB,MAAO,CAAC8C,EAAQ9C,EAAQ8C,EAAQ9C,GAAU,GAI9C,SAAUjC,EAAiBgF,EAAK/C,EAAOJ,GAAvC,yFACkBiD,EAAWE,EAAK/C,GADlC,mBACWC,EADX,KACaF,EADb,KAGUiD,EAAa,IAANjD,EAAU,EAAIA,EAAI,EACzBkD,EAAOhD,IAAMD,EAAQ,EAAIC,EAAIA,EAAI,EACjCiD,EAAOnD,IAAMH,EAAS,EAAIG,EAAIA,EAAI,EAC/BV,EAJU,IAANY,EAAU,EAAIA,EAAI,EAFnC,YAMuBZ,GAAK4D,GAN5B,iBAOiBpB,EAAImB,EAPrB,YAO2BnB,GAAKqB,GAPhC,oBAQgBjD,IAAMZ,GAAKU,IAAM8B,EARjC,iBASgB,OAThB,UASsBxC,EAAIwC,EAAI7B,EAT9B,UAOwC6B,EAPxC,yBAMoCxC,EANpC,uDAhCAiB,EAAKD,aAAe,CAChBT,OAAQ,EAAGI,MAAO,EAAGW,UAnQP,KAiTlBwC,IAASC,OACT,cAAC9C,EAAD,CAAMN,MAAO,GAAIJ,OAAQ,GAAIyD,SAjTd,CACX,CACIC,KAAM,OACN5B,MAAO,GACP6B,KAAM,CAAC,EAAE,IAEb,CACID,KAAM,SACN5B,MAAO,GACP6B,KAAM,CAAC,GAAG,KAEd,CACID,KAAM,SACN5B,MAAO,GACP6B,KAAM,CAAC,GAAG,MAmS4BC,OAC9CC,SAASC,eAAe,U","file":"static/js/main.986ad26d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nconst MineRatio = 0.15;\r\nconst Levels = [\r\n    {\r\n        name: \"Easy\",\r\n        mines: 10,\r\n        size: [9,9]\r\n    },\r\n    {\r\n        name: \"Medium\",\r\n        mines: 40,\r\n        size: [16,16]\r\n    },\r\n    {\r\n        name: \"Expert\",\r\n        mines: 99,\r\n        size: [30,16]\r\n    }\r\n];\r\n\r\nconst GameState = {\r\n    Ongoing: 'ðŸ™‚',\r\n    Loss: 'ðŸ’€',\r\n    Win: 'ðŸ˜Ž'\r\n};\r\n\r\nfunction Cell(props) {\r\n    let className = \"square\";\r\n    let value = props.value;\r\n    const isNumber = Number.isInteger(value) && value > 0 && value <= 9;\r\n    if (isNumber)\r\n        className += \" square_number_\" + value;\r\n    if (isNumber || value === \"\" || value === 'ðŸ’¥')\r\n        className += \" square_revealed\";\r\n    if (value === \"ðŸš©ðŸ’£\") {\r\n        value = 'ðŸš©';\r\n        className += \" square_bad_flag\";\r\n    }\r\n    return (\r\n        <button className={className} onClick={props.onClick} onContextMenu={props.onContextMenu}>\r\n        {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction StepCounter(props) {\r\n    const message = (props.maxSteps === 0) ? \"\" : \"Steps: \";\r\n    const counter = <input type=\"range\" min=\"0\" max={props.maxSteps} value={props.currentStep} onChange={props.onChange} />;\r\n    return (\r\n        <div id=\"stepcounter\">\r\n            {message}\r\n            {(props.maxSteps === 0) ? \"\" : counter}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass Field extends React.Component {\r\n    renderSquare(i) {\r\n        return <Cell\r\n            key={i}\r\n            value={this.props.guesses[i]}\r\n            onClick={(e) => { this.props.onClick(i); e.preventDefault(); }}\r\n            onContextMenu={(e) => { this.props.onContextMenu(i); e.preventDefault(); }}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            {Array.from(Array(this.props.height).keys()).map(y => {\r\n                return (\r\n                <div key={y} className=\"board-row\">\r\n                    {Array.from(Array(this.props.width).keys()).map(x => this.renderSquare(x + y * this.props.width) )}\r\n                </div>);\r\n                }\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nField.defaultProps = {\r\n    height: 3, width: 3\r\n}\r\nField.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.numCells = props.width * props.height;\r\n        this.numMines = Math.floor(this.numCells * this.props.mineRatio);\r\n        console.assert(this.numCells > 0);\r\n        this.initialState = {\r\n            history: [{\r\n                guesses: Array(this.numCells).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            numFlags: 0,\r\n            gameState: GameState.Ongoing\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    reset() {\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    handleClick(i, isFlag) {\r\n        if (this.state.gameState !== GameState.Ongoing)\r\n            return;\r\n        this.stateDirty = false;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const guesses = current.guesses.slice();\r\n        let gameState = this.state.gameState;\r\n        if (this.state.stepNumber === 0) {\r\n            this.mines = initMines(this.numMines, this.props.width, this.props.height, i);\r\n        }\r\n        let numFlags = this.state.numFlags;\r\n        if (isFlag === true) {\r\n            if (guesses[i] === 'ðŸš©') {\r\n                guesses[i] = null;\r\n                numFlags--;\r\n                this.stateDirty = true;\r\n            }\r\n            else if (guesses[i] === null) {\r\n                guesses[i] = 'ðŸš©';\r\n                numFlags++;\r\n                this.stateDirty = true;\r\n            }\r\n            this.setState({numFlags: numFlags});\r\n        } else {\r\n            if (guesses[i] === null) {\r\n                gameState = this.revealAt(guesses, i);\r\n            } else {\r\n                const numMinesToFind = this.mines[i];\r\n                let numGuessedMinesAround = 0;\r\n                let numUnguessedAround = 0;\r\n                for (const neighbour of getIndexesAround(i, this.props.width, this.props.height)) {\r\n                    if (guesses[neighbour] === 'ðŸš©')\r\n                        numGuessedMinesAround++;\r\n                    else if (guesses[neighbour] === null)\r\n                        numUnguessedAround++;\r\n                }\r\n                if (numUnguessedAround > 0) {\r\n                    if (numGuessedMinesAround >= numMinesToFind)\r\n                    for (const neighbour of getIndexesAround(i, this.props.width, this.props.height))\r\n                        if (guesses[neighbour] === null && (gameState = this.revealAt(guesses, neighbour)) === GameState.Loss)\r\n                            break;\r\n                }\r\n            }\r\n        }\r\n        if (gameState === GameState.Loss) {\r\n            this.setState({gameState: GameState.Loss});\r\n            this.onLoss(guesses, i);\r\n        }\r\n        if (this.checkWin(guesses)) {\r\n            this.setState({gameState: GameState.Win});\r\n        }\r\n        if (this.stateDirty === true) {\r\n            this.setState({\r\n                history: history.concat([{\r\n                    guesses: guesses,\r\n                }]),\r\n                stepNumber: history.length,\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWin(guesses) {\r\n        for (let i = 0; i < this.numCells; i++) {\r\n            // check that all non-mine cells are open\r\n            if (this.mines[i] !== 9 && (guesses[i] === null || guesses[i] === 'ðŸš©')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onLoss(guesses, i) {\r\n        for (let n = 0; n < this.numCells; ++n)\r\n            if (n !== i) {\r\n                // reveal unseen bombs\r\n                if (this.mines[n] === 9) {\r\n                    if (guesses[n] === null) {\r\n                        guesses[n] = 'ðŸ’£';\r\n                    }\r\n                // mark bad flags\r\n                } else if (guesses[n] === 'ðŸš©') {\r\n                    guesses[n] = \"ðŸš©ðŸ’£\";\r\n                }\r\n            }\r\n    }\r\n\r\n    // recursive reveal of an unguessed cell\r\n    revealAt(guesses, i) {\r\n        if (guesses[i] !== null)\r\n            return GameState.Ongoing;\r\n        if (this.mines[i] === 9) {\r\n            guesses[i] = 'ðŸ’¥';\r\n            this.stateDirty = true;\r\n            return GameState.Loss;\r\n        }\r\n        if (this.mines[i] === 0) {\r\n            guesses[i] = \"\";\r\n            this.stateDirty = true;\r\n            for (const neighbour of getIndexesAround(i, this.props.width, this.props.height))\r\n                if (this.revealAt(guesses, neighbour) === GameState.Loss)\r\n                    return GameState.Loss;\r\n        } else {\r\n            this.stateDirty = true;\r\n            guesses[i] = this.mines[i];\r\n        }\r\n        return GameState.Ongoing;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        const counter = (\r\n                <StepCounter\r\n                    currentStep={this.state.stepNumber}\r\n                    maxSteps={history.length - 1}\r\n                    onChange={(e) => this.setState({stepNumber: (e.target.value)})}\r\n                />\r\n        );\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-status\">\r\n                <div className=\"mine-counter status_button\">\r\n                    {this.numMines - this.state.numFlags}\r\n                </div>\r\n                <div className=\"emoji status_button\" onClick={() => this.reset()}>\r\n                    {this.state.gameState}\r\n                </div>\r\n            </div>\r\n            <div className=\"game-board\">\r\n                <Field\r\n                    width={this.props.width}\r\n                    height={this.props.height}\r\n                    guesses={current.guesses}\r\n                    onClick={(i) => this.handleClick(i, false)}\r\n                    onContextMenu={(i) => {this.handleClick(i, true);}}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                {counter}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGame.defaultProps = {\r\n    height: 3, width: 3, mineRatio: MineRatio\r\n}\r\nGame.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n    mineRatio: PropTypes.number\r\n}\r\n\r\nfunction initMines(numMines, width, height, startCell) {\r\n    const numCells = width * height;\r\n    var mines = Array(numCells).fill(0);\r\n    for (let i = 1; i <= numMines; ++i) {\r\n        let lastCell = numCells - i;\r\n        let j = Math.floor(Math.random() * lastCell);\r\n        while (j === startCell || mines[j] === 9) {\r\n            j = lastCell++;\r\n        }\r\n        console.assert(mines[j] !== 9);\r\n        mines[j] = 9;\r\n        const neighbourIndices = Array.from(getIndexesAround(j, width, height));\r\n        for (const neighbour of neighbourIndices)\r\n            mines[neighbour] = mines[neighbour] === 9 ? 9 : mines[neighbour] + 1;\r\n    }\r\n    return mines;\r\n}\r\n\r\nfunction IndexToPos(index, width) {\r\n    return [index % width, (index / width) >> 0]; // integer division hack\r\n}\r\n\r\n// Enumerate indexes around another index\r\nfunction* getIndexesAround(pos, width, height) {\r\n    const [x,y] = IndexToPos(pos, width);\r\n    const minX = x === 0 ? 0 : x - 1;\r\n    const minY = y === 0 ? 0 : y - 1;\r\n    const maxX = x === width - 1 ? x : x + 1;\r\n    const maxY = y === height - 1 ? y : y + 1;\r\n    for (let i = minX; i <= maxX; ++i)\r\n        for (let j = minY; j <= maxY; ++j)\r\n            if (x !== i || y !== j) {\r\n                yield i + j * width;\r\n            }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n<Game width={10} height={10} settings={Levels.Easy} />,\r\ndocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}