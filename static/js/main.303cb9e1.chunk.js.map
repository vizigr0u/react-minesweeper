{"version":3,"sources":["index.js"],"names":["getIndexesAround","Levels","Easy","mines","width","height","Medium","Expert","GameState","Cell","props","className","value","isNumber","Number","isInteger","onClick","onContextMenu","StepCounter","message","maxSteps","counter","type","min","max","currentStep","onChange","id","Field","i","this","guesses","e","preventDefault","Array","from","keys","map","y","x","renderSquare","React","Component","defaultProps","Game","console","log","JSON","stringify","level","init","state","makeInitialState","history","numCells","fill","stepNumber","numFlags","gameState","numMines","assert","undefined","setState","isFlag","stateDirty","slice","length","startCell","lastCell","j","Math","floor","random","neighbour","initMines","revealAt","numMinesToFind","numGuessedMinesAround","numUnguessedAround","onLoss","checkWin","concat","n","current","target","reset","handleClick","IndexToPos","index","pos","minY","maxX","maxY","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.303cb9e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nconst Levels = {\r\n    Easy: {\r\n        mines: 10,\r\n        width:9,\r\n        height: 9\r\n    },\r\n    Medium: {\r\n        mines: 40,\r\n        width: 16,\r\n        height: 16\r\n    },\r\n    Expert: {\r\n        mines: 99,\r\n        width: 30,\r\n        height: 16\r\n    }\r\n};\r\n\r\nconst GameState = {\r\n    Ongoing: 'üôÇ',\r\n    Loss: 'üíÄ',\r\n    Win: 'üòé'\r\n};\r\n\r\nfunction Cell(props) {\r\n    let className = \"square\";\r\n    let value = props.value;\r\n    const isNumber = Number.isInteger(value) && value > 0 && value <= 9;\r\n    if (isNumber)\r\n        className += \" square_number_\" + value;\r\n    if (isNumber || value === \"\" || value === 'üí•')\r\n        className += \" square_revealed\";\r\n    if (value === \"üö©üí£\") {\r\n        value = 'üö©';\r\n        className += \" square_bad_flag\";\r\n    }\r\n    return (\r\n        <button className={className} onClick={props.onClick} onContextMenu={props.onContextMenu}>\r\n        {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction StepCounter(props) {\r\n    const message = (props.maxSteps === 0) ? \"\" : \"Steps: \";\r\n    const counter = <input type=\"range\" min=\"0\" max={props.maxSteps} value={props.currentStep} onChange={props.onChange} />;\r\n    return (\r\n        <div id=\"stepcounter\">\r\n            {message}\r\n            {(props.maxSteps === 0) ? \"\" : counter}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass Field extends React.Component {\r\n    renderSquare(i) {\r\n        return <Cell\r\n            key={i}\r\n            value={this.props.guesses[i]}\r\n            onClick={(e) => { this.props.onClick(i); e.preventDefault(); }}\r\n            onContextMenu={(e) => { this.props.onContextMenu(i); e.preventDefault(); }}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            {Array.from(Array(this.props.height).keys()).map(y => {\r\n                return (\r\n                <div key={y} className=\"board-row\">\r\n                    {Array.from(Array(this.props.width).keys()).map(x => this.renderSquare(x + y * this.props.width) )}\r\n                </div>);\r\n                }\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nField.defaultProps = {\r\n    height: Levels.Easy.height, width: Levels.Easy.width\r\n}\r\nField.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"new game, level: \" + JSON.stringify(props.level))\r\n        this.init(props.level);\r\n        this.state = this.makeInitialState();\r\n    }\r\n\r\n    makeInitialState() {\r\n        return {\r\n            history: [{\r\n                guesses: Array(this.numCells).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            numFlags: 0,\r\n            gameState: GameState.Ongoing\r\n        }\r\n    }\r\n\r\n    init(level) {\r\n        this.level = level;\r\n        this.width = level.width;\r\n        this.height = level.height;\r\n        this.numCells = this.width * this.height;\r\n        this.numMines = level.mines;\r\n        console.log(\"init: %d√ó%d cells: %d mines: %d\", this.width, this.height, this.numCells, this.numMines)\r\n        console.assert(this.numCells > 0);\r\n    }\r\n\r\n    reset(level) {\r\n        this.init((level === undefined) ? this.level : level);\r\n        this.setState(this.makeInitialState());\r\n    }\r\n\r\n    handleClick(i, isFlag) {\r\n        if (this.state.gameState !== GameState.Ongoing)\r\n            return;\r\n        this.stateDirty = false;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const guesses = current.guesses.slice();\r\n        let gameState = this.state.gameState;\r\n        if (this.state.stepNumber === 0) {\r\n            this.mines = initMines(this.numMines, this.width, this.height, i);\r\n        }\r\n        let numFlags = this.state.numFlags;\r\n        if (isFlag === true) {\r\n            if (guesses[i] === 'üö©') {\r\n                guesses[i] = null;\r\n                numFlags--;\r\n                this.stateDirty = true;\r\n            }\r\n            else if (guesses[i] === null) {\r\n                guesses[i] = 'üö©';\r\n                numFlags++;\r\n                this.stateDirty = true;\r\n            }\r\n            this.setState({numFlags: numFlags});\r\n        } else {\r\n            if (guesses[i] === null) {\r\n                gameState = this.revealAt(guesses, i);\r\n            } else {\r\n                const numMinesToFind = this.mines[i];\r\n                let numGuessedMinesAround = 0;\r\n                let numUnguessedAround = 0;\r\n                for (const neighbour of getIndexesAround(i, this.width, this.height)) {\r\n                    if (guesses[neighbour] === 'üö©')\r\n                        numGuessedMinesAround++;\r\n                    else if (guesses[neighbour] === null)\r\n                        numUnguessedAround++;\r\n                }\r\n                if (numUnguessedAround > 0) {\r\n                    if (numGuessedMinesAround >= numMinesToFind)\r\n                    for (const neighbour of getIndexesAround(i, this.width, this.height))\r\n                        if (guesses[neighbour] === null && (gameState = this.revealAt(guesses, neighbour)) === GameState.Loss)\r\n                            break;\r\n                }\r\n            }\r\n        }\r\n        if (gameState === GameState.Loss) {\r\n            this.setState({gameState: GameState.Loss});\r\n            this.onLoss(guesses, i);\r\n        }\r\n        if (this.checkWin(guesses)) {\r\n            this.setState({gameState: GameState.Win});\r\n        }\r\n        if (this.stateDirty === true) {\r\n            this.setState({\r\n                history: history.concat([{\r\n                    guesses: guesses,\r\n                }]),\r\n                stepNumber: history.length,\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWin(guesses) {\r\n        for (let i = 0; i < this.numCells; i++) {\r\n            // check that all non-mine cells are open\r\n            if (this.mines[i] !== 9 && (guesses[i] === null || guesses[i] === 'üö©')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onLoss(guesses, i) {\r\n        for (let n = 0; n < this.numCells; ++n)\r\n            if (n !== i) {\r\n                // reveal unseen bombs\r\n                if (this.mines[n] === 9) {\r\n                    if (guesses[n] === null) {\r\n                        guesses[n] = 'üí£';\r\n                    }\r\n                // mark bad flags\r\n                } else if (guesses[n] === 'üö©') {\r\n                    guesses[n] = \"üö©üí£\";\r\n                }\r\n            }\r\n    }\r\n\r\n    // recursive reveal of an unguessed cell\r\n    revealAt(guesses, i) {\r\n        if (guesses[i] !== null)\r\n            return GameState.Ongoing;\r\n        if (this.mines[i] === 9) {\r\n            guesses[i] = 'üí•';\r\n            this.stateDirty = true;\r\n            return GameState.Loss;\r\n        }\r\n        if (this.mines[i] === 0) {\r\n            guesses[i] = \"\";\r\n            this.stateDirty = true;\r\n            for (const neighbour of getIndexesAround(i, this.width, this.height))\r\n                if (this.revealAt(guesses, neighbour) === GameState.Loss)\r\n                    return GameState.Loss;\r\n        } else {\r\n            this.stateDirty = true;\r\n            guesses[i] = this.mines[i];\r\n        }\r\n        return GameState.Ongoing;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        const counter = (\r\n                <StepCounter\r\n                    currentStep={this.state.stepNumber}\r\n                    maxSteps={history.length - 1}\r\n                    onChange={(e) => this.setState({stepNumber: (e.target.value)})}\r\n                />\r\n        );\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-status\">\r\n                <div className=\"mine-counter status_button\">\r\n                    {this.numMines - this.state.numFlags}\r\n                </div>\r\n                <div className=\"emoji status_button\" onClick={() => this.reset()}>\r\n                    {this.state.gameState}\r\n                </div>\r\n            </div>\r\n            <div className=\"game-board\">\r\n                <Field\r\n                    width={this.width}\r\n                    height={this.height}\r\n                    guesses={current.guesses}\r\n                    onClick={(i) => this.handleClick(i, false)}\r\n                    onContextMenu={(i) => {this.handleClick(i, true);}}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                {counter}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGame.defaultProps = {\r\n    level: Levels.Easy\r\n}\r\n\r\nGame.propTypes = {\r\n    level: PropTypes.exact({\r\n        mines: PropTypes.number,\r\n        width: PropTypes.number,\r\n        height: PropTypes.number,\r\n      })\r\n}\r\n\r\nfunction initMines(numMines, width, height, startCell) {\r\n    const numCells = width * height;\r\n    var mines = Array(numCells).fill(0);\r\n    for (let i = 1; i <= numMines; ++i) {\r\n        let lastCell = numCells - i;\r\n        let j = Math.floor(Math.random() * lastCell);\r\n        while (j === startCell || mines[j] === 9) {\r\n            j = lastCell++;\r\n        }\r\n        console.assert(mines[j] !== 9);\r\n        mines[j] = 9;\r\n        const neighbourIndices = Array.from(getIndexesAround(j, width, height));\r\n        for (const neighbour of neighbourIndices)\r\n            mines[neighbour] = mines[neighbour] === 9 ? 9 : mines[neighbour] + 1;\r\n    }\r\n    return mines;\r\n}\r\n\r\nfunction IndexToPos(index, width) {\r\n    return [index % width, (index / width) >> 0]; // integer division hack\r\n}\r\n\r\n// Enumerate indexes around another index\r\nfunction* getIndexesAround(pos, width, height) {\r\n    const [x,y] = IndexToPos(pos, width);\r\n    const minX = x === 0 ? 0 : x - 1;\r\n    const minY = y === 0 ? 0 : y - 1;\r\n    const maxX = x === width - 1 ? x : x + 1;\r\n    const maxY = y === height - 1 ? y : y + 1;\r\n    for (let i = minX; i <= maxX; ++i)\r\n        for (let j = minY; j <= maxY; ++j)\r\n            if (x !== i || y !== j) {\r\n                yield i + j * width;\r\n            }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n<Game level={Levels.Easy} />,\r\ndocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}