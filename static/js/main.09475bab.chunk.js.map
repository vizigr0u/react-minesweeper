{"version":3,"sources":["gameConstants.js","gameutils.js","components/stepcounter.js","components/cell.js","components/gamefield.js","components/timer.js","components/gamestatusbar.js","components/levelpicker.js","components/game.js","index.js"],"names":["Levels","Easy","name","mines","width","height","Medium","Expert","GameState","getIndexesAround","indexToPos","index","pos","x","y","minY","maxX","maxY","i","j","StepCounter","props","message","maxSteps","counter","type","min","max","value","currentStep","onChange","id","Cell","className","isNumber","Number","isInteger","peekedAt","onClick","onContextMenu","onMouseDown","onMouseUp","defaultProps","GameField","state","cellsPeaked","this","guesses","e","preventDefault","peekAt","stopPeek","includes","console","log","gameutils","neighbour","push","setState","Array","from","keys","map","renderSquare","React","Component","Timer","useState","time","setTime","updateTime","undefined","startTime","isRunning","msElapsed","Date","Math","MaxTime","floor","useEffect","timer","setTimeout","clearTimeout","toLocaleString","minimumFractionDigits","GameStatusBar","emoji","gameState","getEmoji","minesLeft","gameReset","LevelPicker","levels","level","l","onChangeLevel","Game","init","makeInitialState","history","numCells","fill","stepNumber","numFlags","numMines","assert","isFlag","boardDirty","slice","length","startCell","lastCell","random","revealAt","numMinesToFind","numGuessedMinesAround","numUnguessedAround","onLoss","checkWin","concat","n","current","reset","handleClick","target","ReactDOM","render","href","src","alt","document","getElementById"],"mappings":"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","file":"static/js/main.09475bab.chunk.js","sourcesContent":["export const Levels = {\r\n    Easy: {\r\n        name: \"Easy\",\r\n        mines: 10,\r\n        width:9,\r\n        height: 9\r\n    },\r\n    Medium: {\r\n        name: \"Medium\",\r\n        mines: 40,\r\n        width: 16,\r\n        height: 16\r\n    },\r\n    Expert: {\r\n        name: \"Expert\",\r\n        mines: 99,\r\n        width: 30,\r\n        height: 16\r\n    }\r\n};\r\n\r\nexport const GameState = {\r\n    NewGame: 0,\r\n    Ongoing: 1,\r\n    Loss: 2,\r\n    Win: 3\r\n};\r\n\r\nexport const MaxTime = 999;\r\n","export function indexToPos(index, width) {\r\n    return [index % width, (index / width) >> 0]; // integer division hack\r\n}\r\n\r\n// Enumerate indexes around another index\r\nexport function* getIndexesAround(pos, width, height) {\r\n    const [x,y] = indexToPos(pos, width);\r\n    const minX = x === 0 ? 0 : x - 1;\r\n    const minY = y === 0 ? 0 : y - 1;\r\n    const maxX = x === width - 1 ? x : x + 1;\r\n    const maxY = y === height - 1 ? y : y + 1;\r\n    for (let i = minX; i <= maxX; ++i)\r\n        for (let j = minY; j <= maxY; ++j)\r\n            if (x !== i || y !== j) {\r\n                yield i + j * width;\r\n            }\r\n}\r\n\r\nexport function initMines(numMines, width, height, startCell) {\r\n    const numCells = width * height;\r\n    var mines = Array(numCells).fill(0);\r\n    for (let i = 1; i <= numMines; ++i) {\r\n        let lastCell = numCells - i;\r\n        let j = Math.floor(Math.random() * lastCell);\r\n        while (j === startCell || mines[j] === 9) {\r\n            j = lastCell++;\r\n        }\r\n        console.assert(mines[j] !== 9);\r\n        mines[j] = 9;\r\n        const neighbourIndices = Array.from(getIndexesAround(j, width, height));\r\n        for (const neighbour of neighbourIndices)\r\n            mines[neighbour] = mines[neighbour] === 9 ? 9 : mines[neighbour] + 1;\r\n    }\r\n    return mines;\r\n}\r\n","const StepCounter = (props) => {\r\n    const message = (props.maxSteps === 0) ? \"\" : \"Steps: \";\r\n    const counter = <input type=\"range\" min=\"0\" max={props.maxSteps} value={props.currentStep} onChange={props.onChange} />;\r\n    return (\r\n        <div id=\"stepcounter\">\r\n            {message}\r\n            {(props.maxSteps === 0) ? \"\" : counter}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StepCounter;\r\n","import propTypes from \"prop-types\";\r\n\r\nconst Cell = (props) => {\r\n    let className = \"square\";\r\n    let value = props.value;\r\n    const isNumber = Number.isInteger(value) && value > 0 && value <= 9;\r\n    if (isNumber)\r\n        className += \" square_number_\" + value;\r\n    if (value === \"🚩💣\") {\r\n        value = '🚩';\r\n        className += \" square_bad_flag\";\r\n    }\r\n    if (isNumber || value === \"\"\r\n        || value === '💥'\r\n        || (className === \"square\" && props.peekedAt && value !== '🚩'))\r\n        className += \" square_revealed\";\r\n    return (\r\n        <button\r\n            className={className}\r\n            onClick={props.onClick}\r\n            onContextMenu={props.onContextMenu}\r\n            onMouseDown={props.onMouseDown}\r\n            onMouseUp={props.onMouseUp}\r\n        >\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nCell.defaultProps = {\r\n    peekedAt: false,\r\n}\r\n\r\nCell.propTypes = {\r\n    peekedAt: propTypes.bool,\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from './cell';\r\nimport * as gameutils from '../gameutils';\r\nimport { Levels } from '../gameConstants';\r\n\r\nclass GameField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { cellsPeaked: []};\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Cell\r\n            key={i}\r\n            value={this.props.guesses[i]}\r\n            onClick={(e) => { this.props.onClick(i); e.preventDefault(); }}\r\n            onContextMenu={(e) => { this.props.onContextMenu(i); e.preventDefault(); }}\r\n            onMouseDown={(e) => { this.peekAt(i); e.preventDefault(); }}\r\n            onMouseUp={(e) => { this.stopPeek(); e.preventDefault(); }}\r\n            peekedAt={this.state.cellsPeaked.includes(i)}\r\n        />;\r\n    }\r\n\r\n    peekAt(i) {\r\n        if (Number.isInteger(this.props.guesses[i])) {\r\n            const cellsPeaked = [];\r\n            console.log(\"peek at \" + i);\r\n            for (const neighbour of gameutils.getIndexesAround(i, this.props.width, this.props.height))\r\n                cellsPeaked.push(neighbour);\r\n            this.setState( { cellsPeaked: cellsPeaked });\r\n        }\r\n    }\r\n\r\n    stopPeek() {\r\n        this.setState( { cellsPeaked: [] } );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            {Array.from(Array(this.props.height).keys()).map(y => {\r\n                return (\r\n                <div key={y} className=\"board-row\">\r\n                    {Array.from(Array(this.props.width).keys()).map(x => this.renderSquare(x + y * this.props.width) )}\r\n                </div>);\r\n                }\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGameField.defaultProps = {\r\n    height: Levels.Easy.height,\r\n    width: Levels.Easy.width\r\n}\r\nGameField.propTypes = {\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n}\r\n\r\nexport default GameField;\r\n","import propTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MaxTime } from '../gameConstants';\r\n\r\nfunction Timer(props) {\r\n    const [time, setTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let timer;\r\n        if (props.isRunning) {\r\n            timer=setTimeout(() => {\r\n                setTime(updateTime());\r\n            }, 100);\r\n        } else\r\n            setTime(updateTime());\r\n        // Clear timeout if the component is unmounted\r\n        return () => {\r\n            if (timer !== undefined)\r\n                clearTimeout(timer);\r\n        };\r\n    }, [props.isRunning, updateTime]);\r\n\r\n    function updateTime() {\r\n        if (props.startTime === undefined && !props.isRunning)\r\n            return 0;\r\n        const msElapsed = +new Date() - +props.startTime;\r\n        return Math.min(MaxTime * 10, Math.floor(msElapsed / 100));\r\n    }\r\n\r\n    return (\r\n    <div className={props.className}>\r\n        {(time/10).toLocaleString(undefined, { minimumFractionDigits: 1}) }\r\n    </div>\r\n    );\r\n}\r\n\r\nTimer.defaultProps = {\r\n    isRunning: false,\r\n    startTime: undefined\r\n}\r\n\r\nTimer.propTypes = {\r\n    isRunning: propTypes.bool,\r\n    startTime: propTypes.instanceOf(Date)\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Timer from './timer';\r\nimport { GameState } from '../gameConstants';\r\n\r\nconst getEmoji = (gameState) => {\r\n    switch (gameState) {\r\n        case GameState.Loss:\r\n            return '💀';\r\n        case GameState.Win:\r\n            return '😎';\r\n        default:\r\n            return'🙂';\r\n    };\r\n}\r\n\r\nconst GameStatusBar = (props) => {\r\n    const emoji = getEmoji(props.gameState);\r\n    return (\r\n        <div className=\"game-status\">\r\n            <div className=\"mine-counter status_button\">\r\n                {props.minesLeft}\r\n            </div>\r\n            <div className=\"emoji status_button\" onClick={props.gameReset}>\r\n                {emoji}\r\n            </div>\r\n            <Timer className=\"timer status_button\"\r\n                isRunning={props.gameState === GameState.Ongoing}\r\n                startTime={props.startTime}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nGameStatusBar.defaultProps = {\r\n    minesLeft: 0,\r\n    startTime: undefined,\r\n    gameState: GameState.NewGame\r\n}\r\n\r\nGameStatusBar.propTypes = {\r\n    minesLeft: PropTypes.number,\r\n    gameState: PropTypes.number,\r\n    startTime: PropTypes.instanceOf(Date)\r\n}\r\n\r\nexport default GameStatusBar;\r\n","import React from 'react';\r\nimport { Levels } from '../gameConstants'\r\n\r\nconst LevelPicker = (props) => {\r\n    const levels = [\r\n        {\r\n            name: 'Easy',\r\n            level: Levels.Easy\r\n        },\r\n        {\r\n            name: 'Medium',\r\n            level: Levels.Medium\r\n        },\r\n        {\r\n            name: 'Expert',\r\n            level: Levels.Expert\r\n        },\r\n    ]\r\n    return (\r\n        <div>\r\n            {levels.map(l => {\r\n                return (\r\n                    <button onClick={() => props.onChangeLevel(l.level)} key={l.name}>\r\n                        {l.name}\r\n                    </button>\r\n                )}\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LevelPicker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as gameutils from '../gameutils';\r\nimport { Levels, GameState } from '../gameConstants';\r\nimport StepCounter from './stepcounter';\r\nimport GameField from './gamefield';\r\nimport GameStatusBar from './gamestatusbar';\r\nimport LevelPicker from './levelpicker';\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.init(props.level);\r\n        this.state = this.makeInitialState();\r\n    }\r\n\r\n    makeInitialState() {\r\n        return {\r\n            history: [{\r\n                guesses: Array(this.numCells).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n            numFlags: 0,\r\n            startTime: undefined,\r\n            gameState: GameState.NewGame\r\n        }\r\n    }\r\n\r\n    init(level) {\r\n        this.level = level;\r\n        this.width = level.width;\r\n        this.height = level.height;\r\n        this.numCells = this.width * this.height;\r\n        this.numMines = level.mines;\r\n        console.log(\"init %s: %d×%d, %d cells, %d mines\", level.name, this.width, this.height, this.numCells, this.numMines)\r\n        console.assert(this.numCells > 0);\r\n    }\r\n\r\n    reset(level) {\r\n        console.log(\"RESET\");\r\n        this.init((level === undefined) ? this.level : level);\r\n        this.setState(this.makeInitialState());\r\n    }\r\n\r\n    handleClick(i, isFlag) {\r\n        let gameState = this.state.gameState;\r\n        if (gameState !== GameState.Ongoing && gameState !== GameState.NewGame)\r\n            return;\r\n\r\n        this.boardDirty = false;\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const guesses = current.guesses.slice();\r\n        \r\n\r\n        // init game on first click\r\n        if (gameState === GameState.NewGame) {\r\n            this.setState( {startTime : new Date(), gameState: GameState.Ongoing } );\r\n            this.mines = gameutils.initMines(this.numMines, this.width, this.height, i);\r\n        }\r\n\r\n        let numFlags = this.state.numFlags;\r\n        if (isFlag === true) {\r\n            if (guesses[i] === '🚩') {\r\n                guesses[i] = null;\r\n                numFlags--;\r\n                this.boardDirty = true;\r\n            }\r\n            else if (guesses[i] === null) {\r\n                guesses[i] = '🚩';\r\n                numFlags++;\r\n                this.boardDirty = true;\r\n            }\r\n            this.setState({numFlags: numFlags});\r\n        } else {\r\n            if (guesses[i] === null) {\r\n                gameState = this.revealAt(guesses, i);\r\n            } else {\r\n                const numMinesToFind = this.mines[i];\r\n                let numGuessedMinesAround = 0;\r\n                let numUnguessedAround = 0;\r\n                for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height)) {\r\n                    if (guesses[neighbour] === '🚩')\r\n                        numGuessedMinesAround++;\r\n                    else if (guesses[neighbour] === null)\r\n                        numUnguessedAround++;\r\n                }\r\n                if (numUnguessedAround > 0) {\r\n                    if (numGuessedMinesAround >= numMinesToFind)\r\n                        for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                            if (guesses[neighbour] === null && (gameState = this.revealAt(guesses, neighbour)) === GameState.Loss)\r\n                                break;\r\n                }\r\n            }\r\n        }\r\n        if (gameState === GameState.Loss) {\r\n            this.setState({gameState: GameState.Loss});\r\n            this.onLoss(guesses, i);\r\n        }\r\n        if (this.checkWin(guesses)) {\r\n            this.setState({gameState: GameState.Win});\r\n        }\r\n        if (this.boardDirty === true) {\r\n            this.setState({\r\n                history: history.concat([{\r\n                    guesses: guesses,\r\n                }]),\r\n                stepNumber: history.length,\r\n            });\r\n        }\r\n    }\r\n\r\n    checkWin(guesses) {\r\n        for (let i = 0; i < this.numCells; i++) {\r\n            // check that all non-mine cells are open\r\n            if (this.mines[i] !== 9 && (guesses[i] === null || guesses[i] === '🚩')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onLoss(guesses, i) {\r\n        for (let n = 0; n < this.numCells; ++n)\r\n            if (n !== i) {\r\n                // reveal unseen bombs\r\n                if (this.mines[n] === 9) {\r\n                    if (guesses[n] === null) {\r\n                        guesses[n] = '💣';\r\n                    }\r\n                // mark bad flags\r\n                } else if (guesses[n] === '🚩') {\r\n                    guesses[n] = \"🚩💣\";\r\n                }\r\n            }\r\n    }\r\n\r\n    // recursive reveal of an unguessed cell\r\n    revealAt(guesses, i) {\r\n        if (guesses[i] !== null)\r\n            return GameState.Ongoing;\r\n        if (this.mines[i] === 9) {\r\n            guesses[i] = '💥';\r\n            this.boardDirty = true;\r\n            return GameState.Loss;\r\n        }\r\n        if (this.mines[i] === 0) {\r\n            guesses[i] = \"\";\r\n            this.boardDirty = true;\r\n            for (const neighbour of gameutils.getIndexesAround(i, this.width, this.height))\r\n                if (this.revealAt(guesses, neighbour) === GameState.Loss)\r\n                    return GameState.Loss;\r\n        } else {\r\n            this.boardDirty = true;\r\n            guesses[i] = this.mines[i];\r\n        }\r\n        return GameState.Ongoing;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <GameStatusBar\r\n                minesLeft={this.numMines - this.state.numFlags}\r\n                gameReset={() => this.reset()}\r\n                gameState={this.state.gameState}\r\n                startTime={this.state.startTime}\r\n            />\r\n            <div className=\"game-board\">\r\n                <GameField\r\n                    width={this.width}\r\n                    height={this.height}\r\n                    guesses={current.guesses}\r\n                    onClick={(i) => this.handleClick(i, false)}\r\n                    onContextMenu={(i) => {this.handleClick(i, true);}}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <StepCounter\r\n                    currentStep={this.state.stepNumber}\r\n                    maxSteps={history.length - 1}\r\n                    onChange={(e) => this.setState({stepNumber: (e.target.value)})}\r\n                />\r\n                <LevelPicker onChangeLevel={(level) => this.reset(level)} />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nGame.defaultProps = {\r\n    level: Levels.Easy\r\n}\r\n\r\nGame.propTypes = {\r\n    level: PropTypes.exact({\r\n        name: PropTypes.string,\r\n        mines: PropTypes.number,\r\n        width: PropTypes.number,\r\n        height: PropTypes.number,\r\n      })\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Levels } from './gameConstants';\r\nimport Game from './components/game';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n(\r\n<div id=\"content\">\r\n    <Game level={Levels.Easy} />\r\n    <div id=\"footer\">\r\n        <a href=\"https://github.com/vizigr0u/react-minesweeper\">\r\n            <img src=\"https://github.githubassets.com/images/icons/emoji/octocat.png\" alt=\"github-octocat\" />\r\n            Clone on github\r\n        </a>\r\n    </div>\r\n</div>),\r\ndocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}